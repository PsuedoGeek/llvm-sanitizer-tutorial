include_directories(..)

# Runtime library sources and build flags.
set(TESTSAN_RTL_SOURCES
	testsan.cpp
	)

set(TESTSAN_RTL_HEADERS
	testsan.h
	)

set(TESTSAN_COMMON_CFLAGS ${SANITIZER_COMMON_CFLAGS})
append_rtti_flag(OFF TESTSAN_COMMON_CFLAGS)
# Prevent clang from generating libc calls.
append_list_if(COMPILER_RT_HAS_FFREESTANDING_FLAG -ffreestanding TESTSAN_COMMON_CFLAGS)

# Static runtime library.
add_compiler_rt_component(testsan)

#Hi Alessandro, thanks for helping. This is a loop that should occur twice. 
foreach(arch ${TESTSAN_SUPPORTED_ARCH})
	set(TESTSAN_CFLAGS ${TESTSAN_COMMON_CFLAGS})
	append_list_if(COMPILER_RT_HAS_FPIE_FLAG -fPIE TESTSAN_CFLAGS)


	if (APPLE) 
		add_weak_symbols("testsan" WEAK_SYMBOL_LINK_FLAGS)
		add_weak_symbols("sanitizer_common" WEAK_SYMBOL_LINK_FLAGS)
		add_compiler_rt_runtime(clang_rt.testsan
			SHARED
			ARCHS ${arch}
			CFLAGS ${TESTSAN_DYNAMIC_CFLAGS}
			LINK_FLAGS ${WEAK_SYMBOL_LINK_FLAGS}
			DEFS ${TESTSAN_DYNAMIC_DEFINITIONS}
			PARENT_TARGET testsan)
	else()
		add_compiler_rt_runtime(clang_rt.testsan
			STATIC
			ARCHS ${arch}
			SOURCES ${TESTSAN_RTL_SOURCES}
			$<TARGET_OBJECTS:RTInterception.${arch}>
			$<TARGET_OBJECTS:RTSanitizerCommon.${arch}>
			$<TARGET_OBJECTS:RTSanitizerCommonLibc.${arch}>
			ADDITIONAL_HEADERS ${TESTSAN_RTL_HEADERS}
			CFLAGS ${TESTSAN_CFLAGS}
			PARENT_TARGET testsan)
		#This prints TESTING only, and the clang_rt.testsan is blank 
		message([STATUS]"TESTING " ${clang_rt.testsan})
		#The actual error occurs here
		add_sanitizer_rt_symbols(clang_rt.testsan
			ARCHS ${arch}
			)
	endif()
	#add_dependencies(testsan
	#  clang_rt.testsan-${arch}-symbols)
endforeach()

